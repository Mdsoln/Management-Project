package com.journals.service.impl;


import com.journals.entity.Article;
import com.journals.exception.ArticleNotFoundException;
import com.journals.models.ArticleCountDownloadsRequest;
import com.journals.repository.ArticleRepository;
import com.journals.service.interfaces.ArticleServiceInterface;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.StringUtils;
import org.springframework.web.multipart.MultipartFile;


import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.util.List;
import java.util.stream.Collectors;

@Service
public class ArticleServiceImpl implements ArticleServiceInterface {
    private static final Logger logger = LoggerFactory.getLogger(ArticleServiceImpl.class);
    @Autowired
    private final ArticleRepository articleRepository;

    public ArticleServiceImpl(ArticleRepository articleRepository) {
        this.articleRepository = articleRepository;
    }

    /*
    the file is received from web as MultipartFile and the articleDto fields
    takes the original name,type from its object, the file path is generated by the
    method storeFile() which returns it as string. Also, the size of files/book/articles
    are stored as string for concatenation with size units like MBs
    * */
    @Override
    public void saveArticle(MultipartFile file) throws IOException {
        String articlePath = storeArticlePath(file);

        Article article = new Article();
        article.setArticleName(StringUtils.cleanPath(file.getOriginalFilename()));
        article.setArticleType(file.getContentType());
        article.setArticlePath(articlePath);
        article.setDownloads(0);
        // 1MB = 1024*1024 bytes
        long fileSizeInBytes = file.getSize();
        double fileSizeInMbs = (double) fileSizeInBytes /( 1024 * 1024);
        String sizeWithUnit = String.format("%.2f MB",fileSizeInMbs);
        article.setArticleSize(sizeWithUnit);

        articleRepository.save(article);
    }

    /*article to directory and database, here I'm storing the path
    of the article in database and the actual article stored in my directory
    the method returns article path as string and then path as string stored in database
    */
    private String storeArticlePath(MultipartFile file) throws IOException {
         String uploadDirectory = "D:/FRONTS";
         String fileName = StringUtils.cleanPath(file.getOriginalFilename());
         Path path = Paths.get(uploadDirectory);
         if (!Files.exists(path)){
             Files.createDirectories(path);
         }

         Path uploadPath = path.resolve(fileName);
        Files.copy(file.getInputStream(), uploadPath, StandardCopyOption.REPLACE_EXISTING);

        return uploadPath.toString();
    }

    /*Fetching an article by name and return an object which will
    passed to the request from front end...By default, here required name should be unique*/
    @Override
    public Article downloadArticleByName(String name) {
        /*List<Article> articles = articleRepository.findByNameLike("%"+name+"%")*/
        Article article = articleRepository.findByArticleName(name);
        if (article == null){
            logger.error("Article with name: "+name+" not found");
            throw new ArticleNotFoundException("Article with name: "+name+" not found");
        }
        //after each request for downloading for specific article,
        // the number of downloads in database are incremented by 1
        article.setDownloads(article.getDownloads()+1);
        articleRepository.save(article);
        return article;
    }

    @Override
    public ArticleCountDownloadsRequest retrivenumberofdownload(String name) {
        Article article = articleRepository.findByArticleName(name);
        if (article == null){
            throw new ArticleNotFoundException("Article not found");
        }
        return new ArticleCountDownloadsRequest(
                article.getArticleName(),
                article.getDownloads()
        );
    }

    @Override
    public List<ArticleCountDownloadsRequest> getAllArticleDownloads() {
        List<Article> article = articleRepository.findAll();
        return article
                .stream()
                .map(this::mapToRequest)
                .collect(Collectors.toList());
    }

    private ArticleCountDownloadsRequest mapToRequest(Article article){
        return new ArticleCountDownloadsRequest(
                article.getArticleName(),
                article.getDownloads()
        );
    }
}
